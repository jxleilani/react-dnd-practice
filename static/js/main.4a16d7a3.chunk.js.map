{"version":3,"sources":["logo.svg","components/DragNDrop.js","App.js","reportWebVitals.js","index.js"],"names":["DragNDrop","data","useState","list","setList","dragging","setDragging","dragItem","useRef","dragNode","handleDragEnter","e","params","console","log","currentItem","current","target","oldList","newList","JSON","parse","stringify","gIndex","items","splice","iIndex","handleDragEnd","removeEventListener","getStyles","className","map","group","onDragEnter","length","title","item","draggable","onDragStart","addEventListener","setTimeout","handleDragStart","App","src","logo","alt","href","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mMAAe,G,MAAA,IAA0B,kC,eC6G1BA,MA3Gf,YAA8B,IAATC,EAAQ,EAARA,KAAQ,EACHC,mBAASD,GADN,mBACpBE,EADoB,KACdC,EADc,OAEKF,oBAAS,GAFd,mBAEpBG,EAFoB,KAEVC,EAFU,KAIrBC,EAAWC,mBACXC,EAAWD,mBAgBXE,EAAkB,SAACC,EAAGC,GAI1BC,QAAQC,IAAI,gBAAiBF,GAC7B,IAAMG,EAAcR,EAASS,QAEzBL,EAAEM,SAAWR,EAASO,UACxBH,QAAQC,IAAI,uBACZV,GAAQ,SAACc,GAEP,IAAIC,EAAUC,KAAKC,MAAMD,KAAKE,UAAUJ,IAUxC,OAPAC,EAAQP,EAAOW,QAAQC,MAAMC,OAC3Bb,EAAOc,OACP,EACAP,EAAQJ,EAAYQ,QAAQC,MAAMC,OAAOV,EAAYW,OAAQ,GAAG,IAGlEnB,EAASS,QAAUJ,EACZO,OAKPQ,EAAgB,SAAhBA,IACJd,QAAQC,IAAI,gBACZR,GAAY,GACZG,EAASO,QAAQY,oBAAoB,UAAWD,GAChDpB,EAASS,QAAU,KACnBP,EAASO,QAAU,MAGfa,EAAY,SAACjB,GAEjB,IAAMG,EAAcR,EAASS,QAC7B,OACED,EAAYQ,SAAWX,EAAOW,QAC9BR,EAAYW,SAAWd,EAAOc,OAEvB,mBAGF,YAGT,OACE,qBAAKI,UAAU,cAAf,SACG3B,EAAK4B,KAAI,SAACC,EAAOT,GAAR,OACR,sBAEEO,UAAU,UAKVG,YAAa5B,IAAa2B,EAAMR,MAAMU,OAAS,SAACvB,GAAD,OAAOD,EAAgBC,EAAG,CAACY,SAAQG,OAAQ,KAAM,KAPlG,UASE,qBAAKI,UAAU,gBAAf,SAAgCE,EAAMG,QACrCH,EAAMR,MAAMO,KAAI,SAACK,EAAMV,GAAP,OACf,qBACEW,WAAS,EACTC,YAAa,SAAC3B,IA7EF,SAACA,EAAGC,GAE1BC,QAAQC,IAAI,gBAAiBF,GAE7BL,EAASS,QAAUJ,EAEnBH,EAASO,QAAUL,EAAEM,OACrBR,EAASO,QAAQuB,iBAAiB,UAAWZ,GAE7Ca,YAAW,WACTlC,GAAY,KACX,GAmESmC,CAAgB9B,EAAG,CAAEY,SAAQG,YAE/BO,YACE5B,EACI,SAACM,GACCD,EAAgBC,EAAG,CAAEY,SAAQG,YAE/B,KAINI,UAAWzB,EAAWwB,EAAU,CAAEN,SAAQG,WAAY,WAdxD,SAgBGU,GAHIA,QAvBJJ,EAAMG,aCtEflC,EAAO,CACX,CAACkC,MAAO,SAAUX,MAAO,CAAC,IAAK,IAAK,MACpC,CAACW,MAAO,UAAWX,MAAO,CAAC,IAAK,OAmCnBkB,MAhCf,WACE,OACE,sBAAKZ,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKa,IAAKC,EAAMd,UAAU,WAAWe,IAAI,SACzC,sCACO,8CADP,0BAGA,mBACEf,UAAU,WACVgB,KAAK,sBACL7B,OAAO,SACP8B,IAAI,sBAJN,4BASF,cAAC,EAAD,CAAW9C,KAAMA,QCdR+C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4a16d7a3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState, useRef } from \"react\";\r\n\r\nfunction DragNDrop({ data }) {\r\n  const [list, setList] = useState(data);\r\n  const [dragging, setDragging] = useState(false);\r\n\r\n  const dragItem = useRef();\r\n  const dragNode = useRef();\r\n\r\n  const handleDragStart = (e, params) => {\r\n    //params are gIndex and iIndex\r\n    console.log(\"drag starting\", params);\r\n    //every time we drag we set dragItem to the params\r\n    dragItem.current = params;\r\n    //dragNode = the current node that we are dragging\r\n    dragNode.current = e.target;\r\n    dragNode.current.addEventListener(\"dragend\", handleDragEnd);\r\n    //asynchronous, when we start dragging it changes to dark background and keeps white background item\r\n    setTimeout(() => {\r\n      setDragging(true);\r\n    }, 0);\r\n  };\r\n\r\n  const handleDragEnter = (e, params) => {\r\n    //for scrolling over other items\r\n    //will fire anytime you drag on top of the other items as well\r\n    //params are now for the item we are dragging over\r\n    console.log(\"entering drag\", params);\r\n    const currentItem = dragItem.current;\r\n    //if the target item is not the same as the item we're dragging\r\n    if (e.target !== dragNode.current) {\r\n      console.log(\"target not the same\");\r\n      setList((oldList) => {\r\n        //make a deep copy of oldlist which is just list from line4\r\n        let newList = JSON.parse(JSON.stringify(oldList));\r\n        //take the 1 st flip with 2 nd, without removing anything in between 0 (1,0,2)\r\n        //removing our currently dragged item, [0] will return that item because only 1 in the list\r\n        newList[params.gIndex].items.splice(\r\n          params.iIndex,\r\n          0,\r\n          newList[currentItem.gIndex].items.splice(currentItem.iIndex, 1)[0]\r\n        );\r\n        //currentItem now became the target item so\r\n        dragItem.current = params;\r\n        return newList;\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDragEnd = () => {\r\n    console.log(\"end dragging\");\r\n    setDragging(false);\r\n    dragNode.current.removeEventListener(\"dragend\", handleDragEnd);\r\n    dragItem.current = null;\r\n    dragNode.current = null;\r\n  };\r\n\r\n  const getStyles = (params) => {\r\n    //params gIndex and iIndex from dragging? ternary\r\n    const currentItem = dragItem.current;\r\n    if (\r\n      currentItem.gIndex === params.gIndex &&\r\n      currentItem.iIndex === params.iIndex\r\n    ) {\r\n      return \"current dnd-item\";\r\n    }\r\n    //want classes current and dnd-item when dragging true, otherwise just dnd-item\r\n    return \"dnd-item\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"drag-n-drop\">\r\n      {list.map((group, gIndex) => (\r\n        <div \r\n          key={group.title} \r\n          className=\"dnd-day\"\r\n          //for dragging over empty column:\r\n          //if we are dragging and positive number of items in a group. 0 would be false.\r\n          //then we want to handleDragEnter\r\n          //we don't have an item in this case so we can set default of item Index to 0.\r\n          onDragEnter={dragging && !group.items.length ? (e) => handleDragEnter(e, {gIndex, iIndex: 0}) : null}\r\n        >\r\n          <div className=\"dnd-day-title\">{group.title}</div>\r\n          {group.items.map((item, iIndex) => (\r\n            <div\r\n              draggable\r\n              onDragStart={(e) => {\r\n                handleDragStart(e, { gIndex, iIndex });\r\n              }}\r\n              onDragEnter={\r\n                dragging\r\n                  ? (e) => {\r\n                      handleDragEnter(e, { gIndex, iIndex });\r\n                    }\r\n                  : null\r\n              }\r\n              //can't use onDragEnd bc unpredicted behavior and could break things\r\n              key={item}\r\n              className={dragging ? getStyles({ gIndex, iIndex }) : \"dnd-item\"}\r\n            >\r\n              {item}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DragNDrop;\r\n","import logo from './logo.svg';\nimport './App.css';\nimport DragNDrop from './components/DragNDrop';\n\nconst data = [\n  {title: 'Monday', items: ['1', '2', '3']},\n  {title: 'Tuesday', items: ['4', '5']}\n]\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n      <DragNDrop data={data} />\n\n      {/* <div className=\"drag-n-drop\">\n        <div className=\"dnd-day\">\n          <div className=\"dnd-day-title\">Monday</div>\n          <div className=\"dnd-item\">\n            <p>Item 1</p>\n          </div>\n        </div>\n      </div> */}\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}